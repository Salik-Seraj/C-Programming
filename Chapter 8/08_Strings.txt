                                        ☣️ CHAPTER 8 - STRINGS ☣️

A string is a 1-D character array terminated by a null ('\0)  → This is null character.

Null character is used to denote string termination characters are stored in contiguous memory locations.

⟫ Initializing Strings

Since string is an array of characters, it can be initialized as follow:

char[] = {'S','A','L','I','K','\0'};

There is another shortcut for initialization of a strings in C language.

char s [] = "SALIK"; ==> In this case C code adds a null character to the string automatically.

» Strings In Memory

A string is stored just like an array in the memory.

⟩⟩⟩ Printing Strings
A string can be printed character by character using printf and %C but there is another convenient way to print strings in C.

char str[] = "SALIK";
printf("%s", str);  => Prints the entire string.

Taking string input from the user we can use %s with scanf to take string input from user.

char str[50];
scanf("%s", str);

Scanf automatically adds the null character when the enter key is pressed.


⟫⟫ Note :-

→ 1. The string should be short enough to fit into the array.
→ 2. scanf cannot be used to input multi-word strings with spaces.


                                ⁜ gets() and puts() ⁜


gets() is a program which can be used to recieve a multi word string.

char st[30];
gets(st);   → The entered string is stored in st !

Multiple gets() calls will be needed for multiple strings 

Likewise, puts can be used to output a string.

puts(st);  → prints the string places the cursor on the next line


Declaring a string using pointers 
we can declare strings using pointers

char *ptr = "Salik";

This tells the compiler to store the string in memory and assigned address is stored in a char pointer.

»» Notes:-

→ 1. Once a string is defined using char st[] = "Salik", it cannot be initialized to something else.

→ 2. A string defined using pointers can be reinitialized.

      ptr = "Salik";

      ⟫Standard Library Functions For Strings

C provides a set of ⟫Standard library functions for string multiplication.

Some of the most commonly used string functions are :

→ strlen ()
This function is used to count the number of characters in the string excluding the null ('\0') character.

int length = strlen(st);

These functions are declared under <string .h> header file.

→ strcpy()
This function is used to copy the content of second string into first string passed to it.

char source[] = "Salik";
char target[30];
strcpy(target, source);  ==> target now contains "Salik"

Target string have enough capacity to store the source string.